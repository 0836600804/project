/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package BHX_UI.BanHang;

import BHX_DAO.MatHangDAO;
import BHX_MODEL.Object.model.ChitiethoadonObj;
import BHX_Swings.bhx.swing.tableToAction.ImageCellRender;
import java.math.BigDecimal;
import java.util.ArrayList;
import javax.swing.JOptionPane;
import javax.swing.event.ListSelectionEvent;
import javax.swing.event.ListSelectionListener;

/**
 *
 * @author VanPhu
 */
public class frm_panel_BanHang_tabPhieuTam extends javax.swing.JPanel {

    private String IDHd = "";
    private boolean IsThanhToan = false; // Mặc định chưa thanh toán.
    private frm_Main_BanHang main;

    public String getIDHd() {
        return IDHd;
    }

    public boolean isIsThanhToan() {
        return IsThanhToan;
    }

    public void setIsThanhToan(boolean IsThanhToan) {
        this.IsThanhToan = IsThanhToan;
    }

    public void setIDHd(String IDHd) {
        this.IDHd = IDHd;
    }
    private ArrayList<ChitiethoadonObj> danhSachCTHD = new ArrayList<>();

    /**
     * Creates new form frm_panel_BanHang_tabPhieuTam
     */
    public frm_panel_BanHang_tabPhieuTam(frm_Main_BanHang main) {
        this.main = main;
        initComponents();
        table.getColumnModel().getColumn(3).setCellRenderer(new ImageCellRender());

        // Khi không chọn bất kì 1 dòng nào trong table.
        table.getSelectionModel().addListSelectionListener(new ListSelectionListener() {
            @Override
            public void valueChanged(ListSelectionEvent e) {
                if (!e.getValueIsAdjusting()) {
                    if (table.getSelectedRow() == -1) {
                        main.setInfoCTHD("", "", new BigDecimal(-1));
                    }
                }
            }
        });
    }

    public frm_panel_BanHang_tabPhieuTam() {
        initComponents();
        table.getColumnModel().getColumn(3).setCellRenderer(new ImageCellRender());
    }

    public void setListCTHD(ChitiethoadonObj cthd) {
        danhSachCTHD.add(cthd);
        loadListCTHD();
    }

    public boolean timKiemCTHD(ChitiethoadonObj cthdObj) {
        for (ChitiethoadonObj chitiethoadonObj : danhSachCTHD) {
            if (chitiethoadonObj.getMaSp() == null ? cthdObj.getMaSp() == null : chitiethoadonObj.getMaSp().equals(cthdObj.getMaSp())) {
                return true;
            }
        }
        return false;
    }

    public void timKiemCTHDAndSumCTHD(ChitiethoadonObj cthdObj) {
        for (ChitiethoadonObj cthd : danhSachCTHD) {
            if (cthd.getMaSp().equals(cthdObj.getMaSp())) {
                BigDecimal sum = cthd.getSoLuong().add(cthdObj.getSoLuong());
                cthd.setSoLuong(sum);
            }
        }
        loadListCTHD();
    }

    public BigDecimal getTongSoLuong() {
        return new BigDecimal(danhSachCTHD.size());
    }

    public int getSelectIndexTable() {
        return table.getSelectedRow();
    }

    public String getIDMHRow() {
        return danhSachCTHD.get(table.getSelectedRow()).getMaSp();
    }

    public BigDecimal getSoLuongRow() {
        return danhSachCTHD.get(table.getSelectedRow()).getSoLuong();
    }

    public BigDecimal getTongTienGiamGia() {
        BigDecimal sum = BigDecimal.ZERO;
        for (ChitiethoadonObj item : danhSachCTHD) {
            sum = sum.add(item.getTienGiamGia());
        }
        return sum;
    }

    public BigDecimal getTongtien() {
        BigDecimal sum = BigDecimal.ZERO;
        for (ChitiethoadonObj item : danhSachCTHD) {
            sum = sum.add(item.getThanhTien());
        }
        return sum;
    }

    public ArrayList<ChitiethoadonObj> getListCTHD() {
        return this.danhSachCTHD;
    }

    public void loadListCTHD() {
        table.clearDataTable();
        for (ChitiethoadonObj chitiethoadonObj : danhSachCTHD) {
            table.addRow(chitiethoadonObj.toRowTable(danhSachCTHD.indexOf(chitiethoadonObj) + 1));
        }
        if (danhSachCTHD.size() > 0) {
            this.main.setTxtTongTienHD(getTongtien());
            this.main.setTxtTongTienGiamGiaHD(getTongTienGiamGia());
            this.main.setTxtTongSoLuongMhHD(getTongSoLuong());
        } else {
            this.main.setTxtTongTienHD(BigDecimal.ZERO);
            this.main.setTxtTongTienGiamGiaHD(BigDecimal.ZERO);
            this.main.setTxtTongSoLuongMhHD(BigDecimal.ZERO);
        }
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        table = new BHX_Swings.bhx.swing.tableToAction.Table();

        jPanel1.setBackground(new java.awt.Color(255, 255, 255));

        table.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "STT", "MÃ SP", "Tên SP", "Hình Ảnh SP", "Đơn Vị Tính", "Giá SP", "% Giảm", "Giá Sau Giảm", "Số Lượng", "Thành Tiền"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, false, false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        table.setFont(new java.awt.Font("Times New Roman", 1, 23)); // NOI18N
        table.setRowHeight(90);
        table.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mousePressed(java.awt.event.MouseEvent evt) {
                tableMousePressed(evt);
            }
        });
        jScrollPane1.setViewportView(table);
        if (table.getColumnModel().getColumnCount() > 0) {
            table.getColumnModel().getColumn(0).setPreferredWidth(50);
            table.getColumnModel().getColumn(0).setMaxWidth(50);
            table.getColumnModel().getColumn(1).setPreferredWidth(200);
            table.getColumnModel().getColumn(1).setMaxWidth(200);
            table.getColumnModel().getColumn(3).setPreferredWidth(200);
            table.getColumnModel().getColumn(3).setMaxWidth(200);
            table.getColumnModel().getColumn(4).setPreferredWidth(120);
            table.getColumnModel().getColumn(4).setMaxWidth(120);
            table.getColumnModel().getColumn(5).setPreferredWidth(120);
            table.getColumnModel().getColumn(5).setMaxWidth(120);
            table.getColumnModel().getColumn(6).setPreferredWidth(130);
            table.getColumnModel().getColumn(6).setMaxWidth(130);
            table.getColumnModel().getColumn(7).setPreferredWidth(120);
            table.getColumnModel().getColumn(7).setMaxWidth(120);
            table.getColumnModel().getColumn(8).setPreferredWidth(100);
            table.getColumnModel().getColumn(8).setMaxWidth(100);
            table.getColumnModel().getColumn(9).setPreferredWidth(125);
            table.getColumnModel().getColumn(9).setMaxWidth(125);
        }

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 1331, Short.MAX_VALUE)
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 817, Short.MAX_VALUE)
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
    }// </editor-fold>//GEN-END:initComponents

    private void tableMousePressed(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_tableMousePressed
        // TODO add your handling code here:
        int index = table.getSelectedRow();
        if (index >= 0) {
            try {
                ChitiethoadonObj obj = danhSachCTHD.get(index);
                String id = obj.getMaSp();
                String ten = obj.getTenSp();
                BigDecimal soLuong = obj.getSoLuong();
                this.main.setInfoCTHD(id, ten, soLuong);
            } catch (Exception e) {
                e.printStackTrace();
            }
        }
    }//GEN-LAST:event_tableMousePressed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane1;
    private BHX_Swings.bhx.swing.tableToAction.Table table;
    // End of variables declaration//GEN-END:variables
}
